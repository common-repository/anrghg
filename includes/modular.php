<?php
/**
 * Functions for modularization.
 *
 * @package WordPress
 * @subpackage A.N.R.GHG Publishing Toolkit
 * Copyright 2021–2023 ANRGHG
 * This file is part of A.N.R.GHG Publishing Toolkit.
 * A.N.R.GHG Publishing Toolkit is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 * A.N.R.GHG Publishing Toolkit is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * You should have received a copy of the GNU General Public License
 * along with A.N.R.GHG Publishing Toolkit.  If not, see <https://www.gnu.org/licenses/>.
 * @see ../COPYING.txt
 */

defined( 'ABSPATH' ) || exit( nl2br( "\r\n\r\n&nbsp; &nbsp; &nbsp; Sorry, this PHP file cannot be displayed in the browser." ) );

/**
 * Applies filters to a configuration value.
 *
 * @since 0.71.0
 * @since 0.80.6 Sanitize all filtered configuration values using `wp_kses_post()`.
 * @done Assess effect on CSS.
 * CAUTION: `wp_kses_post()` destroys CSS’s direct child selector.
 * `wp_kses_post()` can hardly be used for posts, and certainly not
 * for user-entered CSS, prone to include direct child selectors.
 * @since 0.80.0 Revert addition of escapement by `wp_kses_post()`.
 * @param  string $p_s_key    Both the config key and the hook name.
 * @return string $l_s_output Every value from the DB is a string.
 */
function anrghg_apply_config( $p_s_key ) {
	global $g_a_anrghg_config;
	if ( is_array( $g_a_anrghg_config ) && isset( $g_a_anrghg_config[ $p_s_key ] ) ) {
		$l_s_output = apply_filters( $p_s_key, $g_a_anrghg_config[ $p_s_key ] );
		return $l_s_output;
	} else {
		return '';
	}
}

/**
 * Supplies `shortcode_unautop()` functionality for positioners.
 *
 * @since 0.16.1
 * Needed for manually inserted positioners, because the Shortcode API is not used.
 * Needed even for (unregistered) positioners when input using the Shortcode block.
 * @see wp-includes/blocks/shortcode.php
 * Not needed for positioners generated by blocks, as these are not being autop-ed.
 * @link https://wordpress.org/plugins/shortcode-empty-paragraph-fix/
 * @link https://core.trac.wordpress.org/ticket/12061
 * @link https://wordpress.org/plugins/wpautop-control/
 * @link https://www.iceable.com/blog/stop-wpautop-messing-shortcodes/
 * @link https://github.com/WordPress/gutenberg/issues/4446
 * @since 0.33.0 Refactored.
 * Cannot be called before default priority 10 because that is the priority
 * that `wpautop()` is called with.
 * @see wp-includes/default-filters.php
 *
 * @param  string $p_s_content  Article with p-ed delimiters.
 * @return string $p_s_content  Article with un-p-ed delimiters.
 */
function anrghg_supply_shortcode_unautop( $p_s_content ) {
	$l_a_regexp = array();
	$l_a_reg    = array(
		anrghg_apply_config( 'anrghg_table_of_contents_positioner_name' ),
		'anrghg_toc',
		'anrghg_section',
		anrghg_apply_config( 'anrghg_complement_section_end_name' ),
	);
	foreach ( $l_a_reg as $l_s_reg ) {
		$l_s_regex    = anrghg_regex_ready( $l_s_reg );
		$l_a_regexp[] = '/<p>(\[' . $l_s_regex . '[^<]*\])<\/p>/';
	}
	$p_s_content = preg_replace( $l_a_regexp, '$1', $p_s_content );
	return $p_s_content;
}

/**
 * Handles paragraph breaks in tooltips.
 *
 * @since 0.20.2
 * @since 1.6.2 Modularized.
 * @reporter** @droodman
 * @link https://wordpress.org/support/topic/eats-text-when-there-are-linebreaks-in-footnotes-in-lists/
 * @reporter** @ktmuise
 * @link https://wordpress.org/support/topic/multi-paragraph-footnotes/
 * @reporter** @majhul
 * @link https://wordpress.org/support/topic/longer-footnotes/
 * The TinyMCE template editor inserts line breaks on Enter.
 * @since 0.64.0 Emulate paragraph breaks if required.
 * Replace paragraph breaks and double line breaks with a paragraph break emulator span.
 * @param  string $p_s_text Tooltip text.
 * @param  bool   $p_b_full Process paragraph breaks.
 * @return string $p_s_text Tooltip text.
 */
function anrghg_emulate_paragraph_break( $p_s_text, $p_b_full = true ) {
	if ( $p_b_full ) {
		$p_s_text = preg_replace(
			'/<\/p>\s*<p([^>]*)>/si',
			'<span class="anrghg-p-emulate"></span>',
			$p_s_text
		);
	}
	$p_s_text = preg_replace(
		'/<br\s*\/?>\s*<br\s*\/?>/si',
		'<span class="anrghg-p-emulate"></span>',
		$p_s_text
	);
	return $p_s_text;
}

/**
 * Emulates `wpautop()` in Thank You messages.
 *
 * @since 1.6.2
 * Since `wpautop()` may need to be deactivated depending on
 * a prioriy level, this provides a similar user experience.
 * @param  string $p_s_text Message text.
 * @return string $p_s_text Message text.
 */
function anrghg_emulate_auto_p( $p_s_text ) {
	$p_s_text = preg_replace( '/\r?\n/', '<br />', $p_s_text );
	$p_s_text = anrghg_emulate_paragraph_break( $p_s_text, false );
	return $p_s_text;
}

/**
 * Resolves configurable priority.
 *
 * @since 0.35.0 Modularized.
 * Priority matters with respect to relative positioning.
 * @reporter** @micdt
 * @link https://wordpress.org/support/topic/conflict-with-related-posts/
 *
 * The priority level integer is not constrained to be positive.
 * @link https://wordpress.org/support/topic/compatibility-with-the-official-amp-plugin/
 * @link https://wordpress.stackexchange.com/questions/78829/is-there-a-limit-to-hook-priority
 * @link https://core.trac.wordpress.org/ticket/30862
 * @link https://developer.wordpress.org/plugins/hooks/actions/
 * @since 0.18.0 Work around PHP_INT_MIN requiring at least PHP 7.0.
 * @since 0.50.0 Deactivate `wpautop()` if priority is less than 11.
 * @link https://templ.io/blog/prevent-wordpress-from-adding-p-tags-in-content/
 *
 * WPautoP may need to be deactivated when the priority level is outside a safe
 * zone that is 10..PHP_INT_MAX to prevent it from disturbing the already added
 * markup.
 * @since 1.16.5 Make this fix optional.
 *
 * @param  string $p_s_select       Configuration key: priority level option.
 * @param  string $p_s_input        Configuration key: priority level input.
 * @param  bool   $p_b_fix_wpautop  May deactivate the WPautoP fix.
 * @return int    $l_i_priority
 */
function anrghg_config_priority( $p_s_select, $p_s_input, $p_b_fix_wpautop = true ) {
	switch ( anrghg_apply_config( $p_s_select ) ) {
		case '1':
			$l_i_priority = PHP_INT_MAX;
			break;
		case '-1':
			$l_i_priority = ( -PHP_INT_MAX - 1 );
			break;
		case '0':
		default:
			$l_i_priority = (int) anrghg_apply_config( $p_s_input );
	}
	if ( 11 > $l_i_priority && $p_b_fix_wpautop ) {
		add_filter(
			'the_content',
			function( $p_s_content ) {
				remove_filter( 'the_content', 'wpautop' );
				remove_filter( 'the_excerpt', 'wpautop' );
				return $p_s_content;
			},
			0
		);
	}
	return $l_i_priority;
}

/**
 * Makes a string ready to be used in a regex.
 *
 * @since 0.35.0 Modularized.
 * @param  string $p_s_string Input string.
 * @return string $p_s_string Output string.
 */
function anrghg_regex_ready( $p_s_string ) {
	$l_s_pattern = '/([\/\[\]\(\)\{\}\*\+\?\|\^\$\.\\\\])/';
	$p_s_string  = preg_replace( $l_s_pattern, '\\\\$1', $p_s_string );
	return $p_s_string;
}

/**
 * Determines level of top level heading.
 *
 * @since 0.35.0 Modularized.
 * @param  string $p_s_content Article.
 * @return int    $l_i_level   By lack of headings defaults to 2.
 */
function anrghg_determine_level_top_heading( $p_s_content ) {
	$l_a_levels = array();
	$l_i_level  = 2;
	preg_match_all( '/<h(\d)[>\s]/i', $p_s_content, $l_a_matches );
	foreach ( $l_a_matches[1] as $l_s_match ) {
		$l_a_levels[] = (int) $l_s_match;
	}
	for ( $l_i_ind_level = 1; $l_i_ind_level <= 6; $l_i_ind_level++ ) {
		if ( in_array( $l_i_ind_level, $l_a_levels, true ) ) {
			$l_i_level = $l_i_ind_level;
			break;
		}
	}
	return $l_i_level;
}

/**
 * Unifies delimiters’ HTML escapement schemas.
 *
 * @since 0.9.0 Diverging escapement is fixed by this algorithm.
 * @since 0.35.1 Modularized.
 * @since 1.6.19 Limit to <, >, &.
 *
 * @reporter** @patrick_here
 * @link https://wordpress.org/support/topic/how-to-add-footnotes-shortcode-in-elementor/
 *
 * @reporter** @alifarahani8000
 * @link https://wordpress.org/support/topic/after-version-2-5-10-the-ref-or-tags-are-not-longer-working/
 *
 * @reporter** @gova
 * @link https://wordpress.org/support/topic/footnotes-content-number-not-sequential/
 *
 * While in visual mode, the Classic Editor escapes both pointy brackets,
 * the Block Editor enforces balanced escapement only in code editor mode
 * when the start tag is already escaped. In visual mode the Block Editor
 * does not escape the greater-than sign, causing inconsistent markup for
 * all posts added in the Block Editor on a website that was started with
 * the Classic Editor, using complement delimiters with pointy brackets.
 * @see this summary in:
 * @reporter** @tashi1es
 * @link https://wordpress.org/support/topic/garbage-text-on-pages-using-gravityview/#post-15354081
 *
 * @param  string $p_s_section            Of the content.
 * @param  string $p_s_opening            Delimiter.
 * @param  string $p_s_closing            Delimiter.
 * @return array  $l_a_section_and_delims
 */
function anrghg_unify_delimiters( $p_s_section, $p_s_opening, $p_s_closing ) {
	if ( preg_match( '/[<>&]/', $p_s_opening . $p_s_closing ) ) {
		$l_s_unified_opening = htmlspecialchars( htmlspecialchars_decode( $p_s_opening ), ENT_NOQUOTES );
		$l_s_unified_closing = htmlspecialchars( htmlspecialchars_decode( $p_s_closing ), ENT_NOQUOTES );
		$p_s_section         = str_replace( $p_s_opening, $l_s_unified_opening, $p_s_section );
		$p_s_section         = str_replace( $p_s_closing, $l_s_unified_closing, $p_s_section );
		$p_s_section         = str_replace( htmlspecialchars( $p_s_opening, ENT_NOQUOTES ), $l_s_unified_opening, $p_s_section );
		$p_s_section         = str_replace( htmlspecialchars( $p_s_closing, ENT_NOQUOTES ), $l_s_unified_closing, $p_s_section );
		$p_s_section         = str_replace( str_replace( '&gt;', '>', htmlspecialchars( $p_s_opening, ENT_NOQUOTES ) ), $l_s_unified_opening, $p_s_section );
		$p_s_section         = str_replace( str_replace( '&gt;', '>', htmlspecialchars( $p_s_closing, ENT_NOQUOTES ) ), $l_s_unified_closing, $p_s_section );
	}
	$l_a_section_and_delims[] = $p_s_section;
	$l_a_section_and_delims[] = isset( $l_s_unified_opening ) ? $l_s_unified_opening : $p_s_opening;
	$l_a_section_and_delims[] = isset( $l_s_unified_closing ) ? $l_s_unified_closing : $p_s_closing;
	return $l_a_section_and_delims;
}

/**
 * Restricts processing to readable inner HTML.
 *
 * @since 0.9.0
 * @reporter** @kristencahill
 * @link https://wordpress.org/support/topic/conflict-with-accordians-plugin/
 * In outer HTML and schema, complements are kept, but they mustn’t be processed.
 * Plus, some strings used as delimiters may occur in JavaScript and be mistaken.
 * Note: The lengths of both processing-ready delimiters are assumed to be equal.
 * @since 0.67.0 Modularized.
 * @since 0.77.0 Set red flag in case of unbalanced delimiter.
 * @reporter** @russianicons
 * @link https://wordpress.org/support/topic/images-blurry-and-showing-attachment-details/
 * @reporter** @andreasra
 * @link https://wordpress.org/support/topic/warning-unbalanced-footnote-start-tag-short-code-before/
 * @param  string $p_s_section            Content.
 * @param  string $p_s_type_id            Passed on, supplied on calling `anrghg_preprocess_delimiters()`.
 * @param  string $p_s_opening            Delimiter.
 * @param  string $p_s_closing            Delimiter.
 * @return array  $l_a_section_and_delims
 */
function anrghg_restrict_delimiters( $p_s_section, $p_s_type_id, $p_s_opening, $p_s_closing ) {
	global $g_m_unbalanced_delim;

	/**
	 * Generates uniform delimiters.
	 */
	$l_i_random              = random_int( 100000, PHP_INT_MAX );
	$l_s_process_start_delim = "@@opening$p_s_type_id$l_i_random@@";
	$l_s_process_end_delim   = "@@closing$p_s_type_id$l_i_random@@";

	/**
	 * Sorts out script, style, svg, code, outer HTML, inner HTML.
	 *
	 * @since 1.14.1 Debug inner HTML by admitting `>` characters.
	 */
	$l_a_tokens = array();
	preg_match_all(
		'/(<(s(cript|tyle|vg)|code)[^>]*?\s*>.*?<\/\g{2}\s*>|<[^>]+>|[^<]+)/is',
		$p_s_section,
		$l_a_tokens
	);

	/**
	 * Looks for relevant delimiters.
	 */
	$l_b_is_open = false;
	$l_m_incipit = false;
	$p_s_section = '';
	foreach ( $l_a_tokens[0] as $l_s_token ) {
		if ( '<' === $l_s_token[0] ) {
			$p_s_section .= $l_s_token;
		} else {
			do {
				if ( $l_b_is_open ) {
					$l_m_delim_pos = strpos( $l_s_token, $p_s_closing );

					/**
					 * Sets red flag on first unbalanced opening delimiter.
					 */
					$l_m_next_open = strpos( $l_s_token, $p_s_opening );
					if ( false !== $l_m_next_open && false !== $l_m_delim_pos
						&& $l_m_next_open < $l_m_delim_pos
						&& ! $g_m_unbalanced_delim
					) {
						$g_m_unbalanced_delim = $l_m_incipit;
					}
				} else {
					$l_m_delim_pos = strpos( $l_s_token, $p_s_opening );
					$l_m_incipit   = substr( $l_s_token, $l_m_delim_pos + strlen( $p_s_opening ) );
				}
				if ( false === $l_m_delim_pos ) {
					break;

				} else {

					/**
					 * Makes relevant delimiters processing-ready.
					 */
					if ( $l_b_is_open ) {
						$l_s_token   = preg_replace(
							'/' . anrghg_regex_ready( $p_s_closing ) . '/',
							$l_s_process_end_delim,
							$l_s_token,
							1
						);
						$l_b_is_open = false;

					} else {
						$l_s_token   = preg_replace(
							'/' . anrghg_regex_ready( $p_s_opening ) . '/',
							$l_s_process_start_delim,
							$l_s_token,
							1
						);
						$l_b_is_open = true;
					}
				}
			} while ( true );
			$p_s_section .= $l_s_token;
		}
	}

	/**
	 * Catches edge case of last delimiter opening.
	 */
	if ( $l_b_is_open && ! $g_m_unbalanced_delim ) {
		$g_m_unbalanced_delim = $l_m_incipit;
	}

	/**
	 * Prepares the position string for display.
	 */
	if ( $g_m_unbalanced_delim && strlen( $g_m_unbalanced_delim ) > 200 ) {
		$g_m_unbalanced_delim = substr( $g_m_unbalanced_delim, 0, 199 );
		if ( false !== strpos( $g_m_unbalanced_delim, ' ' ) ) {
			$g_m_unbalanced_delim = substr( $g_m_unbalanced_delim, 0, strrpos( $g_m_unbalanced_delim, ' ' ) );
		}
		$g_m_unbalanced_delim .= '…';
	}

	$l_a_section_and_delims[] = $p_s_section;
	$l_a_section_and_delims[] = $l_s_process_start_delim;
	$l_a_section_and_delims[] = $l_s_process_end_delim;

	return $l_a_section_and_delims;
}

/**
 * Preprocesses the delimiters.
 *
 * @since 0.67.0 Modularized.
 * Required to intersperse anchor concatenators.
 * @param  string $p_s_section            Content.
 * @param  string $p_s_type_id            Disambiguates note/source delims, supplied when called.
 * @param  string $p_s_opening            Delimiter.
 * @param  string $p_s_closing            Delimiter.
 * @return array  $l_a_section_and_delims
 */
function anrghg_preprocess_delimiters( $p_s_section, $p_s_type_id, $p_s_opening, $p_s_closing ) {

	/**
	 * Unifies delimiters with respect to varying escapement schemas.
	 */
	$l_a_unified = anrghg_unify_delimiters( $p_s_section, $p_s_opening, $p_s_closing );
	$p_s_section = $l_a_unified[0];
	$p_s_opening = $l_a_unified[1];
	$p_s_closing = $l_a_unified[2];

	/**
	 * Restricts processing to readable inner HTML.
	 */
	$l_a_restricted           = anrghg_restrict_delimiters(
		$p_s_section,
		$p_s_type_id,
		$p_s_opening,
		$p_s_closing
	);
	$l_a_section_and_delims[] = $l_a_restricted[0];
	$l_a_section_and_delims[] = $l_a_restricted[1];
	$l_a_section_and_delims[] = $l_a_restricted[2];

	return $l_a_section_and_delims;
}

/**
 * Removes complements from a string.
 *
 * @since 0.35.1 Five parameters (delims passed).
 * @since 0.50.0 Single parameter (content only).
 * @since 0.62.0 Effective at higher priority too.
 * @param  string $p_s_string  With complements.
 * @return string $p_s_string  Without complements.
 */
function anrghg_remove_complements( $p_s_string ) {
	$l_a_delims       = anrghg_get_complement_delimiters();
	$p_s_start_note   = $l_a_delims[0];
	$p_s_end_note     = $l_a_delims[1];
	$p_s_start_source = $l_a_delims[2];
	$p_s_end_source   = $l_a_delims[3];

	/**
	 * At lower priority than ID derivation.
	 */
	for ( $l_i_type = 1; $l_i_type < 3; $l_i_type++ ) {
		$l_s_type    = 1 === $l_i_type ? 'source' : 'note';
		$l_s_opening = ${"p_s_start_$l_s_type"};
		$l_s_closing = ${"p_s_end_$l_s_type"};
		$l_a_unified = anrghg_unify_delimiters( $p_s_string, $l_s_opening, $l_s_closing );
		$p_s_string  = $l_a_unified[0];
		$l_s_opening = $l_a_unified[1];
		$l_s_closing = $l_a_unified[2];
		$p_s_string  = preg_replace(
			'/' . anrghg_regex_ready( $l_s_opening ) . '.+?' . anrghg_regex_ready( $l_s_closing ) . '/s',
			'',
			$p_s_string
		);
	}

	/**
	 * At higher priority than ID derivation.
	 *
	 * @since 0.62.0
	 */
	$p_s_string = preg_replace(
		'/<span class="anrghg-complement-referrer.+?<br data-anrghg hidden \/><\/span>/s',
		'',
		$p_s_string
	);

	return $p_s_string;
}

/**
 * Removes complements from input field values.
 *
 * @since 0.50.0
 * @reporter** @bogosavljev
 * @link https://wordpress.org/support/topic/compatibility-issue-with-wpforms/
 * Form field values derived from labels contain raw
 * complements disturbing the processing of the data
 * but without further impact on the markup since in
 * outer HTML, complements are ignored.
 *
 * For convenience at the data processing stage, the
 * complements that have fallen into field values as
 * derived from form labels are removed.
 * @param  string $p_s_content  The post or page.
 * @return string $p_s_content
 */
function anrghg_clean_field_values( $p_s_content ) {
	$l_a_delims       = anrghg_get_complement_delimiters();
	$p_s_start_note   = $l_a_delims[0];
	$p_s_end_note     = $l_a_delims[1];
	$p_s_start_source = $l_a_delims[2];
	$p_s_end_source   = $l_a_delims[3];
	for ( $l_i_type = 1; $l_i_type < 3; $l_i_type++ ) {
		$l_s_type    = 1 === $l_i_type ? 'source' : 'note';
		$l_s_opening = ${"p_s_start_$l_s_type"};
		$l_s_closing = ${"p_s_end_$l_s_type"};
		$l_a_unified = anrghg_unify_delimiters( $p_s_content, $l_s_opening, $l_s_closing );
		$p_s_content = $l_a_unified[0];
		$l_s_opening = $l_a_unified[1];
		$l_s_closing = $l_a_unified[2];
		$l_s_regex   = '/(<input [^>]+?value=["\'][^>]+?)' . anrghg_regex_ready( $l_s_opening ) . '[^>]+?' . anrghg_regex_ready( $l_s_closing ) . '/is';
		do {
			$p_s_content = preg_replace( $l_s_regex, '$1', $p_s_content );
		} while ( preg_match( $l_s_regex, $p_s_content ) );
	}
	return $p_s_content;
}

/**
 * Gets the actual complement delimiters.
 *
 * @since 0.50.0 Modularized.
 * @since 0.56.0 Comprehensive array; support previous delimiters.
 *
 * Alternatively, delimiters may be replaced globally by a plugin.
 * @link https://wordpress.org/plugins/search-regex/
 * @courtesy** $tashi1es
 * @link https://wordpress.org/support/topic/garbage-text-on-pages-using-gravityview/#post-15355771
 *
 * @return array $l_a_complement_delims
 *               $l_a_complement_delims[0]  Note start.
 *               $l_a_complement_delims[1]  Note end.
 *               $l_a_complement_delims[2]  Source start.
 *               $l_a_complement_delims[3]  Source end.
 *               $l_a_complement_delims[4]  Name start.
 *               $l_a_complement_delims[5]  Name end.
 *               $l_a_complement_delims[6]  Tooltip end.
 *               $l_a_complement_delims[7]  List link start.
 *               $l_a_complement_delims[8]  List link end.
 */
function anrghg_get_complement_delimiters() {
	$l_i_post_id   = get_the_ID();
	$l_i_threshold = anrghg_apply_config( 'anrghg_previous_delimiters_below_post_id' );
	$l_b_previous  = ( $l_i_threshold > $l_i_post_id );
	$l_a_keys      = array(
		'config'   => array(
			'anrghg_note_start',
			'anrghg_note_end',
			'anrghg_source_start',
			'anrghg_source_end',
			'anrghg_complement_name_start',
			'anrghg_complement_name_end',
			'anrghg_anchor_tooltip_end',
			'anrghg_anchor_tooltip_list_link_start',
			'anrghg_anchor_tooltip_list_link_end',
		),
		'previous' => array(
			'anrghg_previous_note_start',
			'anrghg_previous_note_end',
			'anrghg_previous_source_start',
			'anrghg_previous_source_end',
			'anrghg_previous_complement_name_start',
			'anrghg_previous_complement_name_end',
			'anrghg_previous_anchor_tooltip_end',
			'anrghg_previous_tooltip_list_link_start',
			'anrghg_previous_tooltip_list_link_end',
		),
		'post'     => array(
			'anrghg_post_note_start',
			'anrghg_post_note_end',
			'anrghg_post_source_start',
			'anrghg_post_source_end',
			'anrghg_post_complement_name_start',
			'anrghg_post_complement_name_end',
			'anrghg_post_tooltip_end',
			'anrghg_post_complement_list_link_start',
			'anrghg_post_complement_list_link_end',
		),
	);
	foreach ( $l_a_keys['config'] as $l_i_index => $l_s_config_key ) {
		$l_s_config_val = anrghg_apply_config( $l_s_config_key );
		if ( $l_b_previous ) {
			$l_s_previous_val = anrghg_apply_config( $l_a_keys['previous'][ $l_i_index ] );
			if ( ! empty( $l_s_previous_val ) ) {
				$l_s_config_val = $l_s_previous_val;
			}
		}
		if ( anrghg_apply_config( 'anrghg_complement_delimiters_use_post_meta' ) ) {
			$l_s_post_meta_val = get_post_meta( $l_i_post_id, $l_a_keys['post'][ $l_i_index ], true );
			if ( ! empty( $l_s_post_meta_val ) ) {
				$l_s_config_val = $l_s_post_meta_val;
			}
		}
		$l_a_complement_delims[] = $l_s_config_val;
	}
	return $l_a_complement_delims;
}
// phpcs:disable Squiz.Commenting.FunctionComment.SpacingAfterParamType

/**
 * Converts count to a specified numbering system.
 *
 * @since 0.69.0
 * @courtesy user2095686
 * @courtesy Alex
 * For Roman uppercase numbering.
 * @link https://stackoverflow.com/questions/14994941/numbers-to-roman-numbers-with-php/15023547#15023547
 *
 * @param  int    $p_i_number Western Arabic count.
 * @param  array  $p_a_map    Specifies the target numbering system.
 * @return string $l_s_number Count as specified.
 */
function anrghg_convert_to_specified_numbering( $p_i_number, $p_a_map ) {
	$l_s_number = '';
	while ( $p_i_number > 0 ) {
		foreach ( $p_a_map as $l_s_numeral => $l_i_value ) {
			if ( $p_i_number >= $l_i_value ) {
				$p_i_number -= $l_i_value;
				$l_s_number .= $l_s_numeral;
				break;
			}
		}
	}
	return $l_s_number;
}

/**
 * Converts count to Roman uppercase numbering.
 *
 * @since 0.69.0
 * @courtesy user2095686
 * @courtesy Alex
 * @link https://stackoverflow.com/questions/14994941/numbers-to-roman-numbers-with-php/15023547#15023547
 *
 * @param     int $p_i_number  Western Arabic count.
 * @return string $l_s_number  Roman uppercase count.
 */
function anrghg_convert_number_to_uppercase_roman( $p_i_number ) {
	$l_s_number = anrghg_convert_to_specified_numbering(
		$p_i_number,
		array(
			// phpcs:disable
			'M'  => 1000,
			'CM' =>  900,
			'D'  =>  500,
			'CD' =>  400,
			'C'  =>  100,
			'XC' =>   90,
			'L'  =>   50,
			'XL' =>   40,
			'X'  =>   10,
			'IX' =>    9,
			'V'  =>    5,
			'IV' =>    4,
			'I'  =>    1,
			// phpcs:enable
		)
	);
	return $l_s_number;
}

/**
 * Converts Western Arabic to Eastern Arabic numerals.
 *
 * @since 0.69.0
 * @courtesy Pekka
 * @link https://stackoverflow.com/questions/3386835/convert-english-numbers-to-arabic-numerals/3387060#3387060
 *
 * Eastern Arabic digits’ writing direction is LTR.
 * @param     int $p_i_number  Western Arabic count.
 * @return string $l_s_number  Eastern Arabic count.
 */
function anrghg_convert_number_to_eastern_arabic( $p_i_number ) {
	$l_a_western_arabic = array( '0', '1', '2', '3', '4', '5', '6', '7', '8', '9' );
	$l_a_eastern_arabic = array( '٠', '١', '٢', '٣', '٤', '٥', '٦', '٧', '٨', '٩' );
	$l_s_number         = (string) $p_i_number;
	$l_s_number         = str_replace( $l_a_western_arabic, $l_a_eastern_arabic, $l_s_number );
	return $l_s_number;
}

/**
 * Converts count to base-26 alphabetic Latin uppercase numbering.
 *
 * @since 0.69.0
 * @courtesy Theriault
 * @link https://www.php.net/manual/en/function.base-convert.php#94874
 * @courtesy user414873
 * @link https://stackoverflow.com/questions/7664121/php-converting-number-to-alphabet-and-vice-versa/57655623#57655623
 * @since 0.77.0 Adapt to 1-based numbering.
 * @param     int $p_i_number  Western Arabic count.
 * @return string $l_s_number  base-26 alphabetic Latin uppercase count.
 */
function anrghg_convert_number_to_uppercase_latin( $p_i_number ) {
	$p_i_number--;
	$l_s_number = '';
	for ( $l_i_index = 1; $p_i_number >= 0 && $l_i_index < 10; $l_i_index++ ) {
		$l_s_number  = chr( 0x41 + ( $p_i_number % pow( 26, $l_i_index ) / pow( 26, $l_i_index - 1 ) ) ) . $l_s_number;
		$p_i_number -= pow( 26, $l_i_index );
	}
	return $l_s_number;
}

/**
 * Converts Western-Arabic numbering to any of the supported systems.
 *
 * @since 0.69.0
 * @reporter** @tierarepro
 * @link https://wordpress.org/support/topic/possible-to-have-two-separate-footnote-sections/
 *
 * @param  int $p_i_number  Western Arabic count.
 * @param  int $p_i_system  Numbering system:
 *                          0: Western Arabic.
 *                          1: Eastern Arabic.
 *                          2: Uppercase Roman.
 *                          3: Lowercase Roman.
 *                          4: Base-26 alphabetic uppercase Latin.
 *                          5: Base-26 alphabetic lowercase Latin.
 * @return string $l_s_number  Converted number.
 */
function anrghg_convert_number( $p_i_number, $p_i_system ) {
	switch ( $p_i_system ) {
		case 1:
			$l_s_number = anrghg_convert_number_to_eastern_arabic( $p_i_number );
			break;
		case 2:
			$l_s_number = anrghg_convert_number_to_uppercase_roman( $p_i_number );
			break;
		case 3:
			$l_s_number = strtolower( anrghg_convert_number_to_uppercase_roman( $p_i_number ) );
			break;
		case 4:
			$l_s_number = anrghg_convert_number_to_uppercase_latin( $p_i_number );
			break;
		case 5:
			$l_s_number = strtolower( anrghg_convert_number_to_uppercase_latin( $p_i_number ) );
			break;
		default:
			$l_s_number = (string) $p_i_number;
	}
	return $l_s_number;
}

/**
 * Parses names, replaces with reusable complements.
 *
 * @since 0.9.0  Resolves site-wide reusable complements.
 * @since 0.23.0 Resolves post-wide reusable complements.
 * @since 0.44.0 Modularized.
 * @reporter** @gregfuller
 * @link https://wordpress.org/support/topic/great-plugin-33568/
 * @reporter** @skeeterz71
 * @link https://wordpress.org/support/topic/possible-to-reuse-footnotes/
 * @reporter** @va1der
 * @link https://wordpress.org/support/topic/feature-requests-96/
 * Named notes are a widely expected feature. The reference implementation
 * is in MediaWiki using HTML style syntax with argument-value pairs. That
 * however is not considered mandatory. This plugin uses a lean steamlined
 * yet more powerful syntax. Multiple named complements may be reused in a
 * single instance at one end, while at the other end a single word making
 * up a complement is parsed as a name to begin with.
 *
 * @since 1.5.3 Fix template resolution for CJK with localized space.
 * @param  string $p_s_complement Template.
 * @return string $p_s_complement
 */
function anrghg_reusable_complements( $p_s_complement ) {
	global $g_a_anrghg_reuse, $g_a_anrghg_post_reuse;
	$l_a_complement_delims = anrghg_get_complement_delimiters();
	$l_s_name_start        = $l_a_complement_delims[4];
	$l_s_name_end          = $l_a_complement_delims[5];

	/**
	 * Starts parsing reusable complements simple syntax.
	 */
	if ( false === strpos( $p_s_complement, $l_s_name_start ) ) {

		/**
		 * Registers reusable complements on the fly.
		 *
		 * @since 0.23.0
		 */
		$l_i_length_new_name = strpos( $p_s_complement, $l_s_name_end );
		if ( $l_i_length_new_name ) {
			$l_s_new_name                   = substr( $p_s_complement, 0, $l_i_length_new_name );
			$p_s_complement                 = substr(
				$p_s_complement,
				( $l_i_length_new_name + strlen( $l_s_name_end ) )
			);
			$g_a_anrghg_post_reuse['key'][] = $l_s_new_name;
			$g_a_anrghg_post_reuse['val'][] = $p_s_complement;
		}

		/**
		 * Continues parsing reusable complements simple syntax.
		 */
		$l_s_probe0 = '';
		$l_s_probe1 = '';
		$l_s_clip   = strpos( $p_s_complement, ' ' );
		if ( $l_s_clip ) {
			$l_s_probe0 = substr( $p_s_complement, 0, $l_s_clip );
			$l_s_probe1 = substr( $p_s_complement, ( strrpos( $p_s_complement, ' ' ) + 1 ) );
		} else {
			$l_s_probe0 = $p_s_complement;
		}

		/**
		 * Resolves post-wide reusable complements.
		 *
		 * @since 0.23.0
		 * @since 1.5.2 Debug post-wide templates preceded by more text.
		 */
		$l_b_go = true;
		foreach ( $g_a_anrghg_post_reuse['key'] as $l_i_index => $l_s_name ) {
			if ( $l_s_name === $l_s_probe0 ) {
				$l_s_add        = $l_s_clip ? substr( $p_s_complement, $l_s_clip + 1 ) : '';
				$p_s_complement = $g_a_anrghg_post_reuse['val'][ $l_i_index ] . $l_s_add;
				$l_b_go         = false;
			}
			if ( $l_b_go && ! empty( $l_s_probe1 && $l_s_name === $l_s_probe1 ) ) {
				$l_s_add        = substr( $p_s_complement, 0, strrpos( $p_s_complement, ' ' ) );
				$p_s_complement = $l_s_add . C_S_ANRGHG_SPACE . $g_a_anrghg_post_reuse['val'][ $l_i_index ];
				$l_b_go         = false;
			}
		}

		/**
		 * Resolves site-wide reusable complements.
		 *
		 * @since 0.9.0
		 * @reporter** @skeeterz71
		 * @link https://wordpress.org/support/topic/possible-to-reuse-footnotes/
		 * A widely requested feature, reusing complements site-wide was part of
		 * the initial concept, so it has been implemented during the first rush.
		 */
		if ( $l_b_go ) {
			foreach ( $g_a_anrghg_reuse['key'] as $l_i_index => $l_s_name ) {
				if ( $l_s_name === $l_s_probe0 ) {
					$l_s_add        = $l_s_clip ? substr( $p_s_complement, $l_s_clip + 1 ) : '';
					$p_s_complement = $g_a_anrghg_reuse['val'][ $l_i_index ] . $l_s_add;
					$l_b_go         = false;
				}
				if ( $l_b_go && ! empty( $l_s_probe1 && $l_s_name === $l_s_probe1 ) ) {
					$l_s_add        = substr( $p_s_complement, 0, strrpos( $p_s_complement, ' ' ) );
					$p_s_complement = $l_s_add . C_S_ANRGHG_SPACE . $g_a_anrghg_reuse['val'][ $l_i_index ];
				}
			}
		}
	} else {

		/**
		 * Parses reusable complements complex syntax.
		 *
		 * @since 0.41.0
		 */
		preg_match_all(
			'/' . anrghg_regex_ready( $l_s_name_start ) . '(.+?)' . anrghg_regex_ready( $l_s_name_end ) . '/i',
			$p_s_complement,
			$l_a_matches,
			PREG_OFFSET_CAPTURE
		);
		if ( 0 < count( $l_a_matches ) ) {
			$l_i_len_start = strlen( $l_s_name_start );
			$l_i_len_end   = strlen( $l_s_name_end );
			$l_i_offset    = 0;
			foreach ( $l_a_matches[1] as $l_i_index => $l_a_match ) {
				list(
					$l_s_probe,
					$l_i_pos
				)            = $l_a_match;
				$l_i_len_cut = $l_i_len_start + strlen( $l_s_probe ) + $l_i_len_end;

				/**
				 * Resolves post-wide reusable complements.
				 */
				$l_b_go = true;
				foreach ( $g_a_anrghg_post_reuse['key'] as $l_i_ind => $l_s_name ) {
					if ( $l_s_name === $l_s_probe ) {
						$l_s_reusable = $g_a_anrghg_post_reuse['val'][ $l_i_ind ];
						$l_b_go       = false;
					}
				}

				/**
				 * Resolves site-wide reusable complements.
				 */
				if ( $l_b_go ) {
					foreach ( $g_a_anrghg_reuse['key'] as $l_i_ind => $l_s_name ) {
						if ( $l_s_name === $l_s_probe ) {
							$l_s_reusable = $g_a_anrghg_reuse['val'][ $l_i_ind ];
							$l_b_go       = false;
						}
					}
				}

				/**
				 * Falls back on unregistered name.
				 */
				if ( $l_b_go ) {
					$p_s_complement = substr_replace(
						$p_s_complement,
						'[' . $l_s_probe . ']',
						$l_i_offset + $l_i_pos - $l_i_len_start,
						$l_i_len_cut
					);
					$l_i_offset    += 2 - $l_i_len_start - $l_i_len_end;
				} else {

					/**
					 * Inserts the reusable part in the complement.
					 */
					$p_s_complement = substr_replace(
						$p_s_complement,
						$l_s_reusable,
						$l_i_offset + $l_i_pos - $l_i_len_start,
						$l_i_len_cut
					);
					$l_i_offset    += strlen( $l_s_reusable ) - $l_i_len_cut;
				}
			}
		}
	}
	return $p_s_complement;
}

/**
 * Parses text for reusables and post title placeholder.
 *
 * @since 0.44.0
 * @param  string $p_s_message  Raw text.
 * @return string $p_s_message  Text with reusables inserted.
 */
function anrghg_parse_message( $p_s_message ) {
	$p_s_message = anrghg_reusable_complements( $p_s_message );
	$p_s_message = sprintf( $p_s_message, get_the_title() );
	return $p_s_message;
}

/**
 * URL-decodes while maintaining plus signs.
 *
 * @since 1.6.17
 * `urldecode()` converts a plus sign to a space, despite
 * `+` is allowed in URLs but some apps turn it to `%20`.
 * @link https://support.google.com/webmasters/thread/62860395/does-having-plus-signs-vs-hyphens-to-separate-words-in-your-url-slug-impact-your-seo?hl=en
 * To match user expectations, `+` is decoded beforehand.
 * @link https://core.trac.wordpress.org/ticket/56530#comment:1
 * @param  string $p_s_string String to decode.
 * @return string
 */
function anrghg_url_decode( $p_s_string ) {
	$p_s_string = str_replace( '%2B', '+', $p_s_string );
	$p_s_string = urldecode( $p_s_string );
	return $p_s_string;
}

/**
 * Derives simplified fragment identifiers.
 *
 * @since 0.9.0
 * @courtesy WordPress.org
 * @since 0.17.2 Call `mb_strtolower()` ahead of schedule to fix the
 * `str_replace()` process.
 * Add support for more alternative polygraphs:
 * 'č' → 'cz', 'ř' → 'rz', 'ä' → 'ae'.
 * @since 0.23.1 Convert also typographic hyphens, and other dashes:
 * U+2010..U+2012, U+2015.
 * @since 0.37.0 Convert user-defined pairs; do so in the first place.
 * @since 0.37.0 Option: Convert 14 letters beyond `remove_accents()`,
 * or otherwise, as localized conversion may happen to fail sometimes.
 * @since 0.74.0 Modularized.
 * @since 0.74.0 Support titlecase like on Quora.
 * @link https://www.quora.com/I-read-that-Matt-Mullenweg-does-all-of-his-hiring-interviews-via-Skype-chat-Is-this-really-true-and-can-it-be-justified/answer/Matt-Mullenweg
 * @since 1.6.16 Debug by decoding entities first, and stop removing
 * “entities” like `sanitize_title_with_dashes()` does:
 *
 *     // Kill entities.
 *     $title = preg_replace( '/&.+?;/', '', $title );
 *
 * `remove_accents()` enhances readability but must be deactivatable
 * and, if called, requires some preprocessing so as to maintain the
 * Pound sign and punctuation apostrophes, and to replace the eszett
 * as being a German letter, with a double s, also in other locales.
 * The pound sterling was written as a simple L in printed matters.
 * @see https://developer.wordpress.org/reference/functions/remove_accents/
 *
 * `sanitize_title_with_dashes()` does not support letter apostrophe
 * U+02BC. Most importantly it does not support titlecase, enforces
 * an unconfigurable max length. Thus it stopped being called since
 * modularization.
 * @see wp-includes/formatting.php:2230
 * @link https://developer.wordpress.org/reference/functions/sanitize_title_with_dashes/
 *
 * Weird truncations are fixed by cropping the last word. But
 * @see the `$p_i_text_length` parameter below about doing so
 * only if the string has actually been truncated.
 *
 * Page slugs must always be lowercase, titlecase may cause 404 errors.
 * @link https://stackoverflow.com/questions/7996919/should-url-be-case-sensitive
 * Only people having control over their server may use the opt-in.
 *
 * @param  string $p_s_text        Original with (or without) markup.
 * @param  int    $p_i_max_length  Required.
 * @param  int    $p_i_text_length Optional, helps prevent needlessly
 * cropping the last word. Defaults to 0 and to not cropping any word.
 * @param  bool   $p_b_force_lower Uppercase in slugs is buggy.
 * @return string $p_s_text        A presentable fragment identifier.
 */
function anrghg_simplify_fragment_id(
	$p_s_text,
	$p_i_max_length,
	$p_i_text_length = 0,
	$p_b_force_lower = false
) {
	$p_s_text = wp_strip_all_tags( $p_s_text );

	/**
	 * Decodes HTML entities, reencodes <, >, &.
	 *
	 * @since 1.6.16
	 * @link https://core.trac.wordpress.org/ticket/56531
	 */
	$p_s_text = html_entity_decode( $p_s_text );
	$p_s_text = htmlspecialchars( $p_s_text, ENT_NOQUOTES );

	/**
	 * URL-decodes to avoid screwing up percent sign removal.
	 *
	 * @since 1.6.17
	 * @link https://core.trac.wordpress.org/ticket/56530#comment:1
	 */
	$p_s_text = anrghg_url_decode( $p_s_text );

	/**
	 * Optionally converts to lowercase before configurable conversions.
	 */
	$l_b_titlecase = (bool) anrghg_apply_config( 'anrghg_fragment_ids_support_titlecase' );
	if ( ! $l_b_titlecase || $p_b_force_lower ) {
		if ( seems_utf8( $p_s_text ) ) {
			if ( function_exists( 'mb_strtolower' ) ) {
				$p_s_text = mb_strtolower( $p_s_text, 'UTF-8' );
			}
		}
		$p_s_text = strtolower( $p_s_text );
	}

	/**
	 * Performs a configurable set of custom conversions.
	 */
	$l_a_needle      = array();
	$l_a_replace     = array();
	$l_s_conversions = anrghg_apply_config( 'anrghg_additional_id_conversions' );
	$l_a_conversions = explode( ';', $l_s_conversions );
	foreach ( $l_a_conversions as $l_i_index => $l_s_conversion ) {
		$l_a_conversion = explode( ',', $l_s_conversion );
		if ( 2 === count( $l_a_conversion ) ) {
			$l_a_needle[]  = trim( $l_a_conversion[0] );
			$l_a_replace[] = trim( $l_a_conversion[1] );
		}
	}
	$p_s_text = str_replace( $l_a_needle, $l_a_replace, $p_s_text );

	/**
	 * Converts punctuation apostrophe to hyphen-minus.
	 */
	$p_s_text = str_replace( array( '’', '\'' ), '-', $p_s_text );

	/**
	 * Converts spaces and dashes to hyphen-minus.
	 *
	 * Pro parte according to `sanitize_title_with_dashes()`.
	 */
	$p_s_text = preg_replace( '/[\p{Zs}\p{Zl}\p{Zp}\x{2010}-\x{2015}\x{2212}]/u', '-', $p_s_text );

	/**
	 * Removes entirely. According to `sanitize_title_with_dashes()`.
	 *
	 * @since 1.6.17 Remove all format control characters.
	 * `sanitize_title_with_dashes()` also removes 11 “Non-visible
	 * characters that display without a width”: U+00AD, U+200B, U+200C,
	 * U+200D, U+200E, U+200F, U+202A, U+202B, U+202C, U+202D, U+202E,
	 * U+FEFF. Rather remove the full class of format controls (\p{Cf}).
	 */
	$p_s_text = preg_replace( '/\p{Cf}/u', '', $p_s_text );

	/**
	 * Performs a set of alphabetic conversions.
	 *
	 * These are partly also in `remove_accents()`.
	 */
	if ( anrghg_apply_config( 'anrghg_fragment_ids_more_conversions' ) ) {
		// phpcs:ignore
		$l_a_needle  = array( 'ɛ', 'ɔ',  'ŋ',  'ɲ', 'ʔ', 'ɂ', 'ɣ', 'ɠ', 'ȝ',  'ʒ', 'ǝ', 'ɑ', 'ʊ',  'ʃ' );
		$l_a_replace = array( '3', 'o', 'ng', 'nj', '7', '7', 'g', 'g', '3', 'zh', 'e', 'a', 'u', 'sh' );
		if ( $l_b_titlecase ) {
			// phpcs:ignore
			array_push( $l_a_needle,  'Ɛ', 'Ɔ',  'Ŋ',  'Ɲ', 'Ɂ', 'Ɣ', 'Ɠ', 'Ȝ',  'Ʒ', 'Ǝ', 'Ɑ', 'Ʊ',  'Ʃ' );
			array_push( $l_a_replace, '3', 'O', 'Ng', 'Nj', '7', 'G', 'G', '3', 'Zh', 'E', 'A', 'U', 'Sh' );
		}
		$p_s_text = str_replace( $l_a_needle, $l_a_replace, $p_s_text );
	}

	if ( anrghg_apply_config( 'anrghg_fragment_ids_remove_accents' ) ) {

		/**
		 * Converts okina, letter apostrophe to underscore.
		 */
		$p_s_text = str_replace( array( 'ʻ', 'ʼ' ), '_', $p_s_text );

		/**
		 * Converts diacriticized letters to polygraphs, ß to ss, currencies to letters.
		 *
		 * Optionally called `remove_accents()` converts ß to ss if German, to s if not.
		 * Optionally called `remove_accents()` converts € to E, deletes £ downright.
		 */
		// phpcs:ignore
		$l_a_needle  = array( '€', '£', '$', '¥',  'ß',  'ẞ',  'Å',  'å',  'Ä',  'ä',  'Č',  'č',  'Ř',  'ř' );
		$l_a_replace = array( 'E', 'L', 'S', 'Y', 'ss', 'SS', 'Aa', 'aa', 'Ae', 'ae', 'Cz', 'cz', 'Rz', 'rz' );
		$l_a_lang    = explode( '_', get_locale() );
		$l_s_lang    = $l_a_lang[0];
		if ( 'de' === $l_s_lang || 'sv' === $l_s_lang ) {
			// phpcs:ignore
			array_push( $l_a_needle,   'Ö',  'ö',  'Ü',  'ü' );
			array_push( $l_a_replace, 'Oe', 'oe', 'Ue', 'ue' );
		}
		$p_s_text = str_replace( $l_a_needle, $l_a_replace, $p_s_text );

		/**
		 * Converts Latin alphabetic abbreviation indicators.
		 *
		 * @since 1.6.17
		 * Preformatted superscript small q has not been encoded, by lack of usage.
		 * The Latino ª, º are converted by (optionally called) `remove_accents()`.
		 */
		$l_a_needle  = array( 'ª', 'º', 'ᵃ', 'ᵇ', 'ᶜ', 'ᵈ', 'ᵉ', 'ᶠ', 'ᵍ', 'ʰ', 'ⁱ', 'ʲ', 'ᵏ', 'ˡ', 'ᵐ', 'ⁿ', 'ᵒ', 'ᵖ', 'ʳ', 'ˢ', 'ᵗ', 'ᵘ', 'ᵛ', 'ʷ', 'ˣ', 'ʸ', 'ᶻ' );
		$l_a_replace = array( 'a', 'o', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z' );
		$p_s_text    = str_replace( $l_a_needle, $l_a_replace, $p_s_text );

		/**
		 * Removes remaining diacritics.
		 *
		 * @since 1.6.17 Stop always deleting acute, grave, circumflex accents, macron and hacek.
		 * `sanitize_title_with_dashes()` always selectively deletes 5 combining diacritics, but
		 * leaves all others alone, even combining tilde. Vietnamese acute tone mark is part of
		 * the deletion, but Vietnamese grave tone mark is not, although both are deprecated.
		 * Full list: U+0301, U+0341, U+0300, U+0304, U+030C.
		 * @since 1.6.17 Optionally remove the full set of combining diacritics.
		 * @link https://core.trac.wordpress.org/ticket/56530
		 * @link https://core.trac.wordpress.org/ticket/56656
		 */
		$p_s_text = remove_accents( $p_s_text );
		$p_s_text = preg_replace( '/\p{M}/u', '', $p_s_text );

		/**
		 * Converts &, <, >, @, /, * and dots to hyphen-minus.
		 *
		 * Pro parte according to `sanitize_title_with_dashes()`.
		 */
		$p_s_text = str_replace( array( '&amp;', '&lt;', '&gt;', '@', '/', '*', '.', '·', '‧' ), '-', $p_s_text );

		/**
		 * Converts multiply to 'x'. According to `sanitize_title_with_dashes()`.
		 */
		$p_s_text = str_replace( '×', 'x', $p_s_text );

		/**
		 * Removes entirely. According to `sanitize_title_with_dashes()`.
		 *
		 * @since 1.6.17 Percent sign is part of these classes (\p{Po}).
		 * See * URL-decodes to avoid screwing up percent sign removal.
		 * `sanitize_title_with_dashes()` also removes some punctuation.
		 * Rather remove full classes (also Sk, Lm) that '%', '¡', '¿',
		 * '«', '»', '‹', '›', '‘', '’', '“', '”', '‚', '‛', '„', '‟',
		 * '•', '°', '…', '´', 'ˊ' are in. Except Pc and Pd.
		 * @since 1.6.20 Keep Gc=So, remove '©', '®', '™' specifically.
		 * @since 1.6.20 Leave punctuation unless accent removal is
		 * opted in, as else dumbing down slugs would be pointless.
		 */
		$p_s_text = preg_replace( '/[\p{Ps}\p{Pe}\p{Pi}\p{Pf}\p{Po}\p{Sk}\p{Lm}]/u', '', $p_s_text );
		$p_s_text = str_replace( array( '©', '®', '™' ), '', $p_s_text );

	}

	/**
	 * Collapses hyphen-minus.
	 *
	 * @link https://moz.com/community/q/topic/51482/double-hyphen-in-url-bad/7
	 */
	$p_s_text = preg_replace( '/-+/', '-', $p_s_text );

	/**
	 * Crops leading, trailing hyphen-minus.
	 */
	$p_s_text = trim( $p_s_text, '-' );

	/**
	 * Stores the text length for informed truncation.
	 */
	$l_s_text_length = strlen( $p_s_text );

	/**
	 * Percent-encodes non-ASCII. From `sanitize_title_with_dashes()`.
	 *
	 * @since 0.9.0 The max length is configurable.
	 * @since 1.6.17 Fall back on legacy clean-up, as else the job is done.
	 */
	if ( seems_utf8( $p_s_text ) ) {
		$p_s_text = utf8_uri_encode( $p_s_text, intval( $p_i_max_length ) );
	}

	// Deletes unsafe ASCII.
	$p_s_text = preg_replace( '/[^%A-Za-z0-9_-]/', '', $p_s_text );

	/**
	 * Eventually crops the last word as potentially incomplete.
	 */
	if ( $p_i_max_length + 1 < intval( $p_i_text_length )
		&& strrpos( $p_s_text, '-' )
	) {
		$p_s_text = substr( $p_s_text, 0, strrpos( $p_s_text, '-' ) );
	}

	return $p_s_text;
}

/**
 * Line-wraps visible URLs for Unicode-non-conformant browsers.
 *
 * @since 0.12.0
 * @since 0.58.2 Modularized.
 * @reporter** @andreasra
 * @link https://wordpress.org/support/topic/footnotes-appearing-in-header/page/3/#post-13657398
 * @reporter** @karolszakiel
 * @link https://wordpress.org/support/topic/footnotes-on-mobile-phones/
 * @reporter** @bjrnet21
 * @link https://wordpress.org/support/topic/2-1-4-breaks-on-my-site-images-dont-show/
 * @reporter** @a223123131
 * @link https://wordpress.org/support/topic/broken-layout-starting-version-2-1-4/
 * @reporter** @spiralofhope2
 * @link https://wordpress.org/support/topic/two-links-now-breaks-footnotes-with-blogtext/
 * @reporter** @rjl20
 * @link https://wordpress.org/support/topic/two-links-now-breaks-footnotes-with-blogtext/#post-13825479
 * @reporter** @spaceling
 * @link https://wordpress.org/support/topic/two-links-now-breaks-footnotes-with-blogtext/#post-13825532
 * @reporter** @lukashuggenberg
 * @link https://wordpress.org/support/topic/2-2-6-breaks-all-footnotes/
 * @reporter** @klusik
 * @link https://wordpress.org/support/topic/2-2-6-breaks-all-footnotes/#post-13825885
 * @reporter** @friedrichnorth
 * @link https://wordpress.org/support/topic/footnotes-dont-show-after-update-to-2-2-6/
 * @reporter** @bernardzit
 * @link https://wordpress.org/support/topic/footnotes-dont-show-after-update-to-2-2-6/#post-13826029
 * @reporter** @rumperuu
 * @link https://wordpress.org/support/topic/line-wrap-href-regex-bug/
 * Browsers implementing Unicode UAX#14 are able to line-wrap URLs at slashes.
 * @link https://stackoverflow.com/questions/814700/http-url-allowed-characters-in-parameter-names
 * @link https://webmasters.stackexchange.com/questions/93540/are-spaces-in-href-valid
 *
 * @param  string $p_s_text Complement.
 * @return string $p_s_text
 */
function anrghg_line_wrap_urls( $p_s_text ) {
	$p_s_text = preg_replace(
		'/(?<![-\w\.!~\*\'\(\);]=[\'"])(?<![-\w\.!~\*\'\(\);]=[\'"] )(?<![-\w\.!~\*\'\(\);]=[\'"]  )(?<![-\w\.!~\*\'\(\);]=)(?<!\/)((ht|f)tps?:\/\/[^\\s<]+)/',
		'<span class="anrghg-url-wrap">$1</span>',
		$p_s_text
	);
	return $p_s_text;
}

/**
 * Lightweight minification.
 *
 * @since 0.9.0 Design.
 * Purpose: slightly minify internal style sheets.
 * @since 0.30.0 Applied to script.
 * @since 0.60.0 Modularized and extended.
 * @since 0.62.6 Improved for CSS.
 * @since 0.73.0 Support HTML, `/**` comments.
 * @since 0.80.6 Stalled: Sanitize the code using `wp_kses_post()`.
 * @since 1.3.1 Delete PHPCS ignoreFile comment.
 * @since 1.3.1 Keep only triple-asterisk comment blocks.
 * @since 1.4.9 Leave space between word and parenthesis.
 *
 * Escapement must be done at echoing so PHPCS can check and validate it.
 * `esc_js()` backslash escapes single quotes, and cannot be used for JS.
 * `esc_css()` is missing.
 * `esc_html()` escapes the direct child selector, and cannot escape CSS.
 * `wp_strip_all_tags()` could escape CSS but it is disregarded by PHPCS.
 *
 * To enter debugging mode, add space (or anything) to the language code.
 * To keep a block comment in the output, start it with a triple `/***`.
 * HTML comments however are output as-is, e.g. for browser instructions.
 *
 * @param  string $p_s_type  `html` (less), `css` (careful), `js` (most).
 * @param  string $p_s_code  Multiline, maybe with JS/CSS block comments.
 * @return string $p_s_code  One line, w/o comments other than specified.
 */
function anrghg_minilight( $p_s_type, $p_s_code ) {
	// Deletes PHPCS ignoreFile comment.
	$p_s_code = str_replace( '// phpcs:ignoreFile', '', $p_s_code );
	if ( 'js' === $p_s_type ) {
		// Removes line comments, in case.
		$p_s_code = preg_replace( '/\/\/.*/', '', $p_s_code );
	}
	if ( 'html' === $p_s_type || 'css' === $p_s_type || 'js' === $p_s_type || 'js_with_alert' === $p_s_type ) {
		// Collapses whitespace.
		$p_s_code = preg_replace( '/\s+/', ' ', $p_s_code );
		if ( 'css' === $p_s_type || 'js' === $p_s_type || 'js_with_alert' === $p_s_type ) {
			// Deletes single and double asterisk comment blocks.
			$p_s_code = preg_replace( '/\/\*{1,2}[^*].+?\*\//s', '', $p_s_code );
			// Crops leading, trailing space.
			$p_s_code = preg_replace( '/^\s*(.+)\s*$/', '$1', $p_s_code );
			if ( 'css' === $p_s_type ) {
				// Removes space around plus sign, greater-than, braces, comma, colon, semicolon.
				$p_s_code = preg_replace( '/\s(\+|>|\{|\}|,|\:|\;)\s*/', '$1', $p_s_code );
				$p_s_code = preg_replace( '/\s*(\+|>|\{|\}|,|\:|\;)\s/', '$1', $p_s_code );
			}
			if ( 'js' === $p_s_type ) {
				// Removes space between non-word characters.
				$p_s_code = preg_replace( '/(\W)\s(\W)/', '$1$2', $p_s_code );
				$p_s_code = preg_replace( '/(\W)\s(\W)/', '$1$2', $p_s_code );
				// Removes space between non-word and word.
				$p_s_code = preg_replace( '/(\w)\s(\W)/', '$1$2', $p_s_code );
				$p_s_code = preg_replace( '/(\W)\s(\w)/', '$1$2', $p_s_code );
			}
		}
	}
	return $p_s_code;
}

/**
 * Sanitizes CSS class names and IDs.
 *
 * @since 1.6.11
 * `sanitize_html_class()` returns invalid HTML class when
 * params have a leading digit.
 * Users are best off by prepending a simple underscore.
 * @link https://core.trac.wordpress.org/ticket/44988#comment:4
 * @link https://www.w3.org/International/questions/qa-escapes
 * “In CSS, identifiers (including element names, classes, and IDs in selectors)
 * can contain only the characters [a-zA-Z0-9] and ISO 10646 characters U+00A0 and
 * higher, plus the hyphen (-) and the underscore (_); they cannot start with a digit,
 * two hyphens, or a hyphen followed by a digit. Identifiers can also contain escaped
 * characters and any ISO 10646 character as a numeric code (see next item).
 * For instance, the identifier "B&W?" may be written as "B\&W\?" or "B\26 W\3F".
 * @link https://www.w3.org/TR/CSS21/syndata.html#characters
 * @link https://stackoverflow.com/questions/448981/which-characters-are-valid-in-css-class-names-selectors
 * @link https://stackoverflow.com/a/449000
 * `urldecode()` replaces plus signs with a space, but plus
 * signs do not occur in permalinks, nor do any other ASCII
 * symbols and punctuation except hyphen and underscore. By
 * contrast, U+00A0 and higher i.e. all ISO 10646 non-ASCII
 * characters are allowed both in class names and in IDs.
 * @link https://core.trac.wordpress.org/ticket/56504#ticket
 * @since 1.6.16 Default the prefix to an empty string as not mandatory.
 * @courtesy @peterwilsoncc
 * @link https://core.trac.wordpress.org/ticket/56504#comment:3
 * @since 1.6.16 Use better regex to sanitize.
 * @link https://core.trac.wordpress.org/ticket/56504#comment:4
 * @param  string $p_s_string Class or ID.
 * @param  string $p_s_prefix Character prepended to a leading digit.
 * @param  bool   $p_b_decode Whether to URL-decode.
 * @return string
 */
function anrghg_sanitize_html_id_class( $p_s_string, $p_s_prefix = '_', $p_b_decode = true ) {
	if ( '' !== $p_s_string
		&& ( preg_match( '/[0-9]/', $p_s_string[0] )
			|| ( preg_match( '/-/', $p_s_string[0] ) && preg_match( '/[0-9-]/', $p_s_string[1] ) )
		)
	) {
		$p_s_string = $p_s_prefix . $p_s_string;
	}
	if ( $p_b_decode ) {
		$p_s_string = anrghg_url_decode( $p_s_string );
	} else {
		$p_s_string = preg_replace( '/%[0-9A-Fa-f]{2}/', '', $p_s_string );
	}
	$p_s_string = preg_replace( '/[][^%{}~@`\'"&#$()+|\/*<>=?;:!,.\s]/', '', $p_s_string );
	return $p_s_string;
}
